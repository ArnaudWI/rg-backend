#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('rg-backend:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

// Intégration des sockets (après var server on on l'utilise dans notre 'const io = socketIO(server)')
const socketIO = require('socket.io');
const io = socketIO(server);
const db = require('../config/db');

// const sockets = require('../sockets/sockets');

io.on('connection', socket => {
  console.log(`${socket.id} has logged in.`);

  socket.on('updateWod', function(data) {
        console.log('on est dans updateWod')
    db.wods.findOneAndUpdate (
      {name: "wod"},
      {
        wod: data.wod,
        date: data.date
      }, {
        new: true
      }, function(error, wod) {
        console.log(wod)
        io.emit('wodUpdated', wod);
      });
	});

//add d'une annonce par l'admin
  socket.on('addAnnonce', function(data) {
        console.log('on est dans addAnnonce')
        let newAnnonce = new db.annonces ({
          title: data.title,
          content: data.content,
          type: data.type,
          date: data.date,
        })

        newAnnonce.save(
          (error, annonce) => {
            db.annonces.find (
                function (err, annonces) {
                  io.emit('annonceAdded', annonces);
                })
        });
  });

//suppression d'une annonce par l'admin
  socket.on('removeAnnonce', function(idAnnonce) {
    console.log('on est dans removeAnnonce')
    db.annonces.deleteOne(
      {_id: idAnnonce},
      function(error){
        db.annonces.find(
          function(error, annonces){
            io.emit('annonceRemoved', annonces);
          }
        )
      }
    )
  });

//update d'une annonce par l'admin
  socket.on('updateAnnonce', function(data) {
    console.log('on est dans updateAnnonce')
    db.annonces.findByIdAndUpdate(
      data.id,
    {
      title: data.title,
      content: data.content,
      type: data.type,
      date: data.date,
    }, {
      new: true
    }, function(error, annonce) {
      db.annonces.find(
        function(error, annonces){
          io.emit('annonceUpdated', annonces);
        }
      )
    });
  });

//add d'un smallgroup par l'admin
  socket.on('addSmallGroup', function(data) {
        console.log('on est dans SmallGroup')
        let newSmallGroup = new db.smallgroups ({
          discipline: data.discipline,
          date: data.date,
          hour: data.hour,
          nbrParticipants: data.nbrParticipants,
          price: data.price,
          programme: data.programme,
        })

        newSmallGroup.save(
          (error, smallgroup) => {
            db.smallgroups.find (
                function (err, smallgroups) {
                  io.emit('smallgroupAdded', smallgroups);
                })
        });
  });

//remove du smallgroup par l'admin
  socket.on('removeSmallGroup', function(idSmallGroup) {
    console.log('on est dans removeSmallGroup')
    db.smallgroups.deleteOne(
      {_id: idSmallGroup},
      function(error){
        db.smallgroups.find(
          function(error, smallgroups){
            io.emit('smallgroupRemoved', smallgroups);
          }
        )
      }
    )
  });

//update du smallgroup par l'admin
  socket.on('updateSmallGroup', function(data) {
    console.log('on est dans updateSmallGroup')
    db.smallgroups.findByIdAndUpdate(
      data.id,
    {
      discipline: data.discipline,
      date: data.date,
      hour: data.hour,
      nbrParticipants: data.nbrParticipants,
      price: data.price,
      programme: data.programme,
    }, {
      new: true
    }, function(error, smallgroup) {
      db.smallgroups.find(
        function(error, smallgroups){
          io.emit('smallgroupUpdated', smallgroups);
        }
      )
    });
  });

  //ajouter un participant au smallgroup
  socket.on('addParticipant', function(data) {
  console.log('on est dans addParticipant')
  db.smallgroups.findByIdAndUpdate(
    data.idSmallGroup,
  {
    $push: {
      participantList: {
        firstName: data.firstName,
        lastName: data.lastName,
        idUser: data.idUser
      }
    }
  }, {
    new: true
  }, function(error, smallgroup) {
    db.smallgroups.findById(
      data.idSmallGroup,
       function(error, smallgroup){
        io.emit('participantAdded', smallgroup);
      }
    )
    db.smallgroups.find(
      function(error, smallgroups){
        io.emit('smallgroupUpdated', smallgroups);
      }
    )
  });
});

//suppression du participant au smallgroup
  socket.on('removeParticipant', function(data) {
  console.log('on est dans removeParticipant')
  db.smallgroups.findByIdAndUpdate(
    data.idSmallGroup,
  {
    $pull: {
      participantList: {
        idUser: data.idUser
      }
    }
  }, {
    new: true
  }, function(error, smallgroup) {
    db.smallgroups.findById(
      data.idSmallGroup,
       function(error, smallgroup){
        io.emit('participantRemoved', smallgroup);
      }
    )
    db.smallgroups.find(
      function(error, smallgroups){
        io.emit('smallgroupUpdated', smallgroups);
      }
    )
  });
});

});

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
